using System;
using cAlgo.API;
using cAlgo.API.Internals;
using cAlgo.API.Indicators;

namespace cAlgo.Robots
{
    [Robot(AccessRights = AccessRights.None)]
    public class TitaniumAGBot : Robot
    {
        [Parameter("Quantity (Lots)", Group = "Volume", DefaultValue = 0.01, MinValue = 0.01, Step = 0.01)]
        public double Quantity { get; set; }

        [Parameter("Number of Candles", Group = "Horizontal Lines", DefaultValue = 10, MinValue = 1)]
        public int NumberOfCandles { get; set; }

        [Parameter("ATR Multiplier", Group = "Horizontal Lines", DefaultValue = 1, MinValue = 0.1, Step = 0.1)]
        public double AtrMultiplier { get; set; }

        private AverageTrueRange atr;
        private bool tradeStarted;
        private int numSidesTested;

        private double highestPrice;
        private double lowestPrice;
        private double buyStop;
        private double sellStop;
        double currentPrice;
        
        double buyPrice;
        double sellPrice;
        bool priceSet;
        
        bool buyTrade;
        bool sellTrade;

        protected override void OnStart()
        {
            // Initialize ATR indicator
            atr = Indicators.AverageTrueRange(14, MovingAverageType.Simple);
            tradeStarted = false;
            numSidesTested = 0;

            // Calculate initial values for horizontal lines
            CalculateHorizontalLines();
        }

        protected override void OnTick()
        {
            // Check price conditions and set tradeStarted if conditions are met
            CheckPriceConditions();
            
            currentPrice = Bars.ClosePrices.LastValue;
            
            if (currentPrice < highestPrice && currentPrice > buyStop && !priceSet)
            {
                buyPrice = highestPrice;
                sellPrice = buyStop;
                tradeStarted = true;
                priceSet = true;
                
            }
            
             if (currentPrice > lowestPrice && currentPrice < sellStop && !priceSet)
            {
                buyPrice = sellStop;
                sellPrice = lowestPrice;
                tradeStarted = true;
                priceSet = true;
                
            }

            // Update numSidesTested and adjust lot size based on conditions
            if (tradeStarted)
            {


                

                
                // buying 
                if (currentPrice > buyPrice)
                {
                    if(!buyTrade)
                    {
                        numSidesTested++;
                        ExecuteMarketOrder(TradeType.Buy, SymbolName, Quantity, "Buy Trade");
                        // Check if numSidesTested is even and adjust lot size
                        if (numSidesTested % 2 == 0)
                        {
                            Quantity *= 2; // Multiply lot size by 2
                        }
                        buyTrade = true;
                        sellTrade = false;
                    }
                }
                
                // selling 
                if (currentPrice < sellPrice)
                {
                    if(!sellTrade)
                    {
                        numSidesTested++;
                        ExecuteMarketOrder(TradeType.Sell, SymbolName, Quantity, "Sell Trade");
                        // Check if numSidesTested is even and adjust lot size
                        if (numSidesTested % 2 == 0)
                        {
                            Quantity *= 2; // Multiply lot size by 2
                        }
                        buyTrade = false;
                        sellTrade = true;
                    }
                }
            
            
            
            
            
            
            } // end of tick
            
            

            
        }

        private void CheckPriceConditions()
        {
            double currentPrice = Bars.ClosePrices.LastValue;
            double currentAtr = atr.Result.LastValue;

            // Recalculate horizontal lines based on current price and ATR
            highestPrice = Bars.HighPrices.Maximum(NumberOfCandles);
            lowestPrice = Bars.LowPrices.Minimum(NumberOfCandles);
            buyStop = highestPrice - (currentAtr * AtrMultiplier);
            sellStop = lowestPrice + (currentAtr * AtrMultiplier);

            // Check conditions for tradeStarted
            if ((currentPrice > buyStop && currentPrice < highestPrice) ||
                (currentPrice < sellStop && currentPrice > lowestPrice))
            {
                tradeStarted = true;
            }
            else
            {
                tradeStarted = false;
            }
        }

        private void CalculateHorizontalLines()
        {
            double currentAtr = atr.Result.LastValue;

            highestPrice = Bars.HighPrices.Maximum(NumberOfCandles);
            lowestPrice = Bars.LowPrices.Minimum(NumberOfCandles);
            buyStop = highestPrice - (currentAtr * AtrMultiplier);
            sellStop = lowestPrice + (currentAtr * AtrMultiplier);

            // Draw horizontal lines on chart
            Chart.DrawHorizontalLine("HighestPrice", highestPrice, Color.Magenta);
            Chart.DrawHorizontalLine("LowestPrice", lowestPrice, Color.Magenta);
            Chart.DrawHorizontalLine("BuyStop", buyStop, Color.Aqua);
            Chart.DrawHorizontalLine("SellStop", sellStop, Color.Aqua);
        }

        protected override void OnStop()
        {
            // Ensure all positions are closed when cBot is stopped
            foreach (var position in Positions)
                ClosePosition(position);

            // Handle cBot stop here 
        }
    }
}
